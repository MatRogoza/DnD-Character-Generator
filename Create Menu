import tkinter as tk
from tkinter import ttk
from tkinter import Canvas, Scrollbar, Frame
import sqlite3
import ttkbootstrap as tb
from create_menu_tabs import *

#list of classes for the class dropdown
class_options = ['Artificier', 'Barbarian', 'Bard', 'Cleric', 'Druid', 'Fighter', 'Monk', 'Paladin', 'Ranger', 'Rogue', 'Sorcerer', 'Warlock', 'Wizard']
#list of class levels for the level dropdown
class_levels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

def center_window(window, width, height): #function to center window
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()

    x = int((screen_width / 2) - (width / 2))
    y = int((screen_height / 2) - (height / 2))

    window.geometry(f'{width}x{height}+{x}+{y}')

#function to populate the selected classes' features for what level you are
def create_feature_button(feature, row, container):
    # Create a feature button
    feature_button = tk.Button(container, text=f"Level {feature[3]}: {feature[2]}", relief=tk.RAISED)
    feature_button.grid(row=row, column=0, columnspan=2, sticky="ew", padx=10, pady=5)

    # Create a hidden description label
    feature_description = tk.Label(container, text=feature[4], wraplength=500, justify=tk.LEFT)
    feature_description.grid(row=row+1, column=0, columnspan=2, padx=20, pady=5)
    feature_description.grid_remove()  # Initially hidden

    def toggle_description():
        # Toggle visibility of the description
        if feature_description.winfo_viewable():
            feature_description.grid_remove()
        else:
            feature_description.grid()

    # Set the button command
    feature_button.config(command=toggle_description)


def display_class_features(selected_class, selected_level):
    # Clear the content of the scrollable frame
    for widget in scrollable_frame.winfo_children():
        widget.destroy()

    conn = sqlite3.connect('dnd_character_info.db')
    c = conn.cursor()

    class_id = class_options.index(selected_class) + 1

    c.execute('SELECT * FROM features WHERE class_id = ? AND level <= ? ORDER BY level', (class_id, selected_level))
    features = c.fetchall()

    if features:
        for row, feature in enumerate(features):
            create_feature_button(feature, row * 2, scrollable_frame)
    else:
        label_no_feature = tk.Label(scrollable_frame, text="No features found for this class at the selected level.")
        label_no_feature.grid(row=0, column=0, columnspan=2, padx=10, pady=5)

    conn.close()

#create the new buttons for the level once class is chosen
def class_level_button(e):
    label_class_level = tk.Label(tab1, text='Level:')
    label_class_level.grid(row=1, column=2, padx=10, pady=10)

    combo_class_level = ttk.Combobox(tab1, values=class_levels, width=2)
    combo_class_level.grid(row=1, column=3, padx=10, pady=10)

    combo_class_level.bind('<<ComboboxSelected>>', lambda e: display_class_features(combo_class.get(), combo_class_level.get()))
    

#Event trigger and label once a class is chosen
def get_class_level(e):
    #label_class_name = tk.Label(tab1, text=f"You selected: {combo_class.get()}")
    #label_class_name.grid(row=2, column=0, columnspan=2)
    class_level_button(e)
    
def next_tab2():
    notebook.select(1)
    
#function to call the create character menu
def create_menu():
    global create_window
    global combo_class
    global scrollable_frame
    global tab1
    global notebook

    create_window = tk.Tk()
    create_window.title("Mat's D&D Character Sheet")
    create_window.geometry('600x600')

    # Create a notebook widget (this is the widget that holds the tabs)
    notebook = ttk.Notebook(create_window)
    notebook.pack(fill='both', expand=True)

    # Create frames for each tab
    tab1 = ttk.Frame(notebook)
    tab2 = ttk.Frame(notebook)
    tab3 = ttk.Frame(notebook)
    tab4 = ttk.Frame(notebook)
    tab5 = ttk.Frame(notebook)

    # Add frames to notebook as tabs
    notebook.add(tab1, text="  Class  ")
    notebook.add(tab2, text="  Background  ")
    notebook.add(tab3, text="  Species  ")
    notebook.add(tab4, text="  Stats  ")
    notebook.add(tab5, text="  Equipment  ")

    # Labels for the create character menu
    label_name = tk.Label(tab1, text='Character Name:')
    label_class = tk.Label(tab1, text='Class:')

    # Positions of the labels
    label_name.grid(row=0, column=0, padx=10, pady=10)
    label_class.grid(row=1, column=0, padx=10, pady=10)

    # Entry for the Character name
    entry_name = tk.Entry(tab1)
    entry_name.grid(row=0, column=1)

    # Class selection dropdown
    combo_class = ttk.Combobox(tab1, values=class_options)
    combo_class.grid(row=1, column=1, padx=10, pady=10)

    # Binding the action of selecting a class to then make the level button
    combo_class.bind('<<ComboboxSelected>>', get_class_level)

    # Create a scrollable area
    canvas = Canvas(tab1)
    canvas.grid(row=2, column=0, columnspan=2, sticky="nsew", padx=10, pady=10)

    scrollbar = Scrollbar(tab1, orient=tk.VERTICAL, command=canvas.yview)
    scrollbar.grid(row=2, column=2, sticky="ns")

    canvas.configure(yscrollcommand=scrollbar.set)

    # Create a frame inside the canvas for scrollable content
    scrollable_frame = Frame(canvas)
    canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")

    # Configure scroll behavior
    scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
    tab1.grid_rowconfigure(1, weight=1)
    tab1.grid_columnconfigure(0, weight=1)

    # Allow tab1 to expand properly with the content
    tab1.grid_rowconfigure(3, weight=1)
    tab1.grid_columnconfigure(0, weight=1)


    continue_button1 = tk.Button(tab1, text="Continue", bg="green", font=("Arial", 20, "bold"), command=next_tab2)
        
    continue_button1.place(relx=1.0, rely=1.0, anchor='se')
    
    create_tab2(tab2)
    create_tab3(tab3)
    create_tab4(tab4)
    create_tab5(tab5)

    center_window(create_window, 1000, 600)
    
#test to see if the db is being connected
def list_all_tables():
    try:
        conn = sqlite3.connect(r'f:\Python\D&D Sheets\dnd_character_info.db')
        c = conn.cursor()

        # Query to list all tables in the database
        c.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = c.fetchall()

        if tables:
            print("Tables in the database:")
            for table in tables:
                print(table[0])
        else:
            print("No tables found in the database.")
            
        conn.close()

    except sqlite3.Error as e:
        print(f"An error occurred: {e}")
